enum Status {
  NOT_REGISTERED
  REGISTERED
}

type Cluster @entity {
  id: ID!
  commission: BigInt!
  rewardAddress: Bytes!
  clientKey: Bytes!
  networkId: Bytes!
  status: Status!
  delegators: [String!]!
  totalDelegations: [Delegation!] @derivedFrom(field: "cluster")
  updatedCommission: BigInt
  commissionUpdatesAt: BigInt
  updatedNetwork: Bytes
  networkUpdatesAt: BigInt
  clusterUnregistersAt: BigInt
  pendingRewards: BigInt!
  historicalRewardWithdrawl: [RewardWithdrawl!]! @derivedFrom(field: "cluster")
}

type Stash @entity {
  id: ID!
  stashId: Bytes!
  staker: Bytes!
  delegatedCluster: String!
  undelegationRequestedAt: BigInt
  undelegatesAt: BigInt
  tokenIds: [Bytes!]
  tokensDelegated: [TokenData!]! @derivedFrom(field: "stash")
  tokensDelegatedId: [Bytes!]
  tokensDelegatedAmount: [BigInt!]
  tokensDelegatedIdV2: [Bytes!]
  tokensDelegatedAmountV2: [BigInt!]
  redelegationUpdateBlockV1: BigInt
  redelegationUpdateBlock: BigInt
  redelegationUpdatedClusterV1: String
  redelegationUpdatedCluster: String
  isActive: Boolean!
  createdAt: BigInt!
  isBridged: Boolean!
}

type Token @entity {
  id: ID!
  tokenId: Bytes!
  tokenAddress: Bytes!
  rewardFactor: BigInt!
  enabled: Boolean!
}

type Selector @entity {
  id: ID! # Address of epoch selector
  networkId: Bytes!
}

type Network @entity {
  id: ID!
  networkId: Bytes!
  rewardPerEpoch: BigInt
  clusters: [String!]!
  epochSelector: Selector
}

type TokenData @entity {
  id: ID!
  token: Token!
  amount: BigInt!
  stash: Stash!
}

type Delegation @entity {
  id: ID!
  token: Token!
  amount: BigInt!
  cluster: Cluster!
}

type Delegator @entity {
  id: ID!
  address: String!
  totalPendingReward: BigInt!
  totalDelegations: [DelegatorToken!]! @derivedFrom(field: "delegator")
  pendingRewards: [DelegatorReward!]! @derivedFrom(field: "delegator")
  historicalRewardWithdrawl: [RewardWithdrawl!]! @derivedFrom(field: "delegator")
  totalRewardsClaimed: BigInt!
  stashes: [String!]!
  clusters: [ClusterCount!]!
}

type ClusterCount @entity {
  id: ID!
  cluster: String!
  count: BigInt!
}

type DelegatorToken @entity {
  id: ID!
  token: Token!
  amount: BigInt!
  delegator: Delegator!
}

type State @entity {
  id: ID!
  clusters: [String!]!
  activeClusterCount: BigInt!
  # lastUpdatedBlock: BigInt!
  # redelegationWaitTime: BigInt!
  # undelegationWaitTime: BigInt!
}

type DelegatorReward @entity {
  id: ID!
  amount: BigInt!
  cluster: Cluster!
  delegator: Delegator!
}

type RewardWithdrawl @entity {
  id: ID!
  amount: BigInt!
  cluster: Cluster!
  delegator: Delegator
  timestamp: BigInt!
  isAuto: Boolean!
  txHash: String!
}

type SelectedCluster @entity {
  id: ID! # (networkId + epoch + cluster) is the unique ID
  networkId: Network!
  epoch: BigInt!
  address: String! # address of the selected cluster
}

type ReceiverStake @entity {
  id: ID!, # address + epoch  is unique
  address: String!,
  epoch: BigInt!,
  stake: BigInt!
  balance: ReceiverBalance
}

type ReceiverBalance @entity {
  id: ID!,
  balance: BigInt!
}

type TicketsIssued @entity {
  id: ID!, # networkId + epoch + cluster + issuedBy is unique
  networkId: Network!
  epoch: BigInt!, 
  cluster: String!,
  issuedBy: String!
  tickets: BigInt!
}

# ID is address of the cluster (only used for calculating tickets)
type ClusterRewardTracker @entity {
  id: ID!,
  reward: BigInt!,
}

type ContractStore @entity {
  id: ID! # ID added to constants
  address: String!
}